<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Projects | e-Enquiry]]></title>
  <link href="http://blog.stillwell.me/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://blog.stillwell.me/"/>
  <updated>2015-12-31T14:37:37+00:00</updated>
  <id>http://blog.stillwell.me/</id>
  <author>
    <name><![CDATA[Mark Stillwell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Web Pages With Template Render]]></title>
    <link href="http://blog.stillwell.me/blog/2013/06/22/creating-web-pages-with-template-render/"/>
    <updated>2013-06-22T18:41:00+01:00</updated>
    <id>http://blog.stillwell.me/blog/2013/06/22/creating-web-pages-with-template-render</id>
    <content type="html"><![CDATA[<p>I&rsquo;m very fond of static website generators&ndash;they&rsquo;re a lot faster than
interpreted (php, ruby) or even most compiled (Java) based solutions. I&rsquo;m using
<a href="http://octopress.org/" title="Octopress: A blogging framework for hackers">Octopress</a> to manage this blog currently, it&rsquo;s basically a set of
customizations, style files, and build scripts that extend the capabilities of
<a href="http://jeckyllrb.com/" title="Jeckyll">Jeckyll</a>, a comprehensive platform in its own right. I&rsquo;ve also tried out the
node.js based <a href="http://docpad.org/" title="Docpad">Docpad</a> and the pythonic <a href="http://hyde.github.com/" title="Hyde: A static website generator">Hyde</a> and <a href="http://blog.getpelican.com/" title="Pelican Development Blog">Pelican</a>.</p>

<p>While these all do a fairly good job of managing a standard blogging sites, in
my opinion they all suffer from trying to do a bit too much, to manage the whole
job of website creation, which makes it difficult to decouple small, specific
bits of functionality, like rendering just a few web pages from templates. Also,
I never really got into the <a href="http://jinja.pocoo.org/" title="Jinja2">Jinja2</a> templating language: I don&rsquo;t like the
way that it (doesn&rsquo;t) handle inline code, or the fact that every call to a macro
has to be in the form of a <em>block</em>, or that every macro definition needs to do
something with the content included in the block, even if you didn&rsquo;t want to use
that feature. I much prefer the style of <a href="http://www.makotemplates.org/" title="Mako Templates for Python">Mako</a>, but none of the popular
static website generators seem to support it.</p>

<p>For the Department&rsquo;s digital sign project, I just needed something that would
rending a single, but fairly complicated, web page in a way that would be easy
for me to customize, and I didn&rsquo;t want to deal with the overhead of a lot of
features aimed at things like blogging that I never intended to use. My first
thought was to hack something together with <em>Make</em> and the mako-render script
that came packaged with Ubuntu, but whereas the static website generators did
more than I wanted, this seemed a little too simple. So, naturally, I decided to
hack together something on my own.</p>

<!--more-->


<p>In point of fact the mako template library makes it very easy to invoke the
rendering engine once you give it a few basic configuration parameters, so most
of the script is just parameter passing. Jinja2 is similarly easy, so I added
another function and threw it in as well, changing the name of the project from
mako-render2 to template-render. In the future I plan to add a few more features,
such as support for Jeckyll-like Yaml front matter, while keeping the focus
solidly on the task of rendering individual webpages.</p>

<h1>User Manual</h1>

<pre><code>usage: template-render [-h] [-i INPUTFILE] [-e ENGINE] [-d TEMPLATE_DIRS]
                       [-t TEMPLATE] [-b BLOCK] [-m METAFILE] [-v VAR]
                       [-o OUTPUTFILE] [-ienc INPUT_ENCODING]
                       [-oenc OUTPUT_ENCODING]

Render a file using templates.

optional arguments:
  -h, --help            show this help message and exit
  -i INPUTFILE, --inputfile INPUTFILE
                        input file
  -e ENGINE, --engine ENGINE
                        templating engine
  -d TEMPLATE_DIRS, --template_dirs TEMPLATE_DIRS
                        : delimited template search path
  -t TEMPLATE, --template TEMPLATE
                        template to apply to input file
  -b BLOCK, --block BLOCK
                        template block to override
  -m METAFILE, --metafile METAFILE
                        metadata file in yaml format
  -v VAR, --var VAR     name=value pairs to be added to metadata
  -o OUTPUTFILE, --outputfile OUTPUTFILE
                        output file
  -ienc INPUT_ENCODING, --input_encoding INPUT_ENCODING
                        input encoding
  -oenc OUTPUT_ENCODING, --output_encoding OUTPUT_ENCODING
                        output encoding
</code></pre>

<p>The most important parameter is &ldquo;-t&rdquo;, which is used to tell the script what
template should be used for rendering. The script also supports inclusion of
content from either a file or stdin with the &ldquo;-i&rdquo; option (&ldquo;-&rdquo; for stdin), and
this content is inserted into the block named with &ldquo;-b&rdquo;. The &ldquo;-d&rdquo; option can be
used to provide a &ldquo;:&rdquo;-delimited search path for template files. By default the
script assumes mako format templates, but it also supports jinja2 templates
using the command line option &ldquo;-e jinja2&rdquo;. Support for additional template
engines may be added in the future.</p>

<p>Templates are given access to a &ldquo;meta&rdquo; python hash that contains values supplied
by either yaml-format metadata files specified using the &ldquo;-m&rdquo; option or using
&ldquo;-v&rdquo; name=value pairs. The metadata files are read in the order given on the
command line, then the name=value pairs are applied, also in command line order.
So, it is possible to supply a site-wide metadata file and then override values
for specific pages.</p>

<p>By default the script outputs the rendered document to stdout, but a filename
can also be given using the &ldquo;-o&rdquo; option. The script reads and writes utf-8 by
default, but these can be overridden using the &ldquo;-ienc&rdquo; and &ldquo;-oenc&rdquo; options
respectively.</p>

<p>Now, I just need a few more scripts to create my blog pages and manage the
build&hellip;</p>
]]></content>
  </entry>
  
</feed>
